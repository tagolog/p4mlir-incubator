// RUN: p4mlir-translate --typeinference-only %s | FileCheck %s

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// This is a combination of const.p4, constsigned.p4 and constant-fold-infint.p4
// from P4C testsuite

const bit<32> bzero = 32w0;

const bool cfalse = false;
const bool ctrue = true;

const bit<48> btooLarge = 48w0xAA_BB_CC_DD_EE_FF_00; // this is too large
const bit<32> bone = 32w1;
const bit<32> bmax = 32w0xFFFF_FFFF;
const bit<32> bz = 1;
const bit<8> blarge = (bit<8>)16w1024;
const bit<32> btwo = 32w2;
const int<32> btwotwo = (int<32>)btwo;
const bit<32> btwothree = (bit<32>)btwotwo;
const bit<6>  btwofour = (bit<6>)(bit<32>)(int<32>)btwo;

struct S {
    bit<32> a;
    bit<32> b;
}

const S v = { 32w3, (bit<32>)bz };

struct T
{
    S a;
    S b;
}

const T zz = {
    { 32w0, 32w1 },
    { 32w2, 32w3 }
};

const bit<32> x = 32w0;
const bit<32> x1 = ~32w0;

typedef int<32> int32;

const int32 izero = (int32)32w0;

const bit<4> fa = 0b0101;
const int fb = (int)fa; // 5
const bit<7> fc = (bit<7>)fb; // 5

const int<4> fd = -1;
const int fe = (int)fd; // -1
const bit<7> ff = (bit<7>)fe; // 0b1111111 = 127
const int<7> fg = (int<7>)fe; // 0b1111111 = -1
const int fh = (int)fg; // -1

const int<8> sa = 0;
const int<8> sb = -1;
const int<8> sc = -2;
const int<8> sd = -127;
const int<8> se = -128;
const int<8> sf = -129;
const int<8> sg = -255;
const int<8> sh = -256;
const int<8> si = 1;
const int<8> sj = 2;
const int<8> sk = 127;
const int<8> sl = 128;
const int<8> sm = 129;
const int<8> sn = 255;
const int<8> so = 256;

const int<8> sa0 = 8s0;
const int<8> sb0 = -8s1;
const int<8> sc0 = -8s2;
const int<8> sd0 = -8s127;
const int<8> se0 = -8s128;
const int<8> sf0 = -8s129;
const int<8> sg0 = -8s255;
const int<8> sh0 = -8s256;
const int<8> si0 = 8s1;
const int<8> sj0 = 8s2;
const int<8> sk0 = 8s127;
const int<8> sl0 = 8s128;
const int<8> sm0 = 8s129;
const int<8> sn0 = 8s255;
const int<8> so0 = 8s256;

const int<1> szz0 = 0;
const int<1> szz1 = 1;
const int<2> szz2 = 2;
const int<1> szz3 = (int<1>) szz2[0:0];


// CHECK: #[[$ATTR_0:.+]] = #p4hir.bool<false> : !p4hir.bool
// CHECK: #[[$ATTR_1:.+]] = #p4hir.bool<true> : !p4hir.bool
// CHECK: #[[$ATTR_2:.+]] = #p4hir.int<-127> : !i8i
// CHECK: #[[$ATTR_3:.+]] = #p4hir.int<-128> : !i8i
// CHECK: #[[$ATTR_4:.+]] = #p4hir.int<4294967295> : !b32i
// CHECK: #[[$ATTR_5:.+]] = #p4hir.int<127> : !b7i
// CHECK: #[[$ATTR_6:.+]] = #p4hir.int<-1> : !i1i
// CHECK: #[[$ATTR_7:.+]] = #p4hir.int<-1> : !i4i
// CHECK: #[[$ATTR_8:.+]] = #p4hir.int<-1> : !i7i
// CHECK: #[[$ATTR_9:.+]] = #p4hir.int<-1> : !i8i
// CHECK: #[[$ATTR_10:.+]] = #p4hir.int<-1> : !infint
// CHECK: #[[$ATTR_11:.+]] = #p4hir.int<-2> : !i2i
// CHECK: #[[$ATTR_12:.+]] = #p4hir.int<-2> : !i8i
// CHECK: #[[$ATTR_13:.+]] = #p4hir.int<206488571150080> : !b48i
// CHECK: #[[$ATTR_14:.+]] = #p4hir.int<0> : !b32i
// CHECK: #[[$ATTR_15:.+]] = #p4hir.int<0> : !b8i
// CHECK: #[[$ATTR_16:.+]] = #p4hir.int<0> : !i1i
// CHECK: #[[$ATTR_17:.+]] = #p4hir.int<0> : !i32i
// CHECK: #[[$ATTR_18:.+]] = #p4hir.int<0> : !i8i
// CHECK: #[[$ATTR_19:.+]] = #p4hir.int<127> : !i8i
// CHECK: #[[$ATTR_20:.+]] = #p4hir.int<1> : !b32i
// CHECK: #[[$ATTR_21:.+]] = #p4hir.int<1> : !i8i
// CHECK: #[[$ATTR_22:.+]] = #p4hir.int<2> : !b32i
// CHECK: #[[$ATTR_23:.+]] = #p4hir.int<2> : !b6i
// CHECK: #[[$ATTR_24:.+]] = #p4hir.int<2> : !i32i
// CHECK: #[[$ATTR_25:.+]] = #p4hir.int<2> : !i8i
// CHECK: #[[$ATTR_26:.+]] = #p4hir.int<3> : !b32i
// CHECK: #[[$ATTR_27:.+]] = #p4hir.int<5> : !b4i
// CHECK: #[[$ATTR_28:.+]] = #p4hir.int<5> : !b7i
// CHECK: #[[$ATTR_29:.+]] = #p4hir.int<5> : !infint

// CHECK-LABEL:   module
// CHECK-NEXT:    %[[VAL_0:.*]] = p4hir.const ["bzero"] #[[$ATTR_14]]
// CHECK:         %[[VAL_1:.*]] = p4hir.const ["cfalse"] #[[$ATTR_0]]
// CHECK:         %[[VAL_2:.*]] = p4hir.const ["ctrue"] #[[$ATTR_1]]
// CHECK:         %[[VAL_3:.*]] = p4hir.const ["btooLarge"] #[[$ATTR_13]]
// CHECK:         %[[VAL_4:.*]] = p4hir.const ["bone"] #[[$ATTR_20]]
// CHECK:         %[[VAL_5:.*]] = p4hir.const ["bmax"] #[[$ATTR_4]]
// CHECK:         %[[VAL_6:.*]] = p4hir.const ["bz"] #[[$ATTR_20]]
// CHECK:         %[[VAL_7:.*]] = p4hir.const ["blarge"] #[[$ATTR_15]]
// CHECK:         %[[VAL_8:.*]] = p4hir.const ["btwo"] #[[$ATTR_22]]
// CHECK:         %[[VAL_9:.*]] = p4hir.const ["btwotwo"] #[[$ATTR_24]]
// CHECK:         %[[VAL_10:.*]] = p4hir.const ["btwothree"] #[[$ATTR_22]]
// CHECK:         %[[VAL_11:.*]] = p4hir.const ["btwofour"] #[[$ATTR_23]]
// CHECK:         %[[VAL_12:.*]] = p4hir.const ["v"] #p4hir.aggregate<[#[[$ATTR_26]], #[[$ATTR_20]]]> : !S
// CHECK:         %[[VAL_13:.*]] = p4hir.const ["zz"] #p4hir.aggregate<[#p4hir.aggregate<[#[[$ATTR_14]], #[[$ATTR_20]]]> : !S, #p4hir.aggregate<[#[[$ATTR_22]], #[[$ATTR_26]]]> : !S]> : !T
// CHECK:         %[[VAL_14:.*]] = p4hir.const ["x"] #[[$ATTR_14]]
// CHECK:         %[[VAL_15:.*]] = p4hir.const ["x1"] #[[$ATTR_4]]
// CHECK:         %[[VAL_16:.*]] = p4hir.const ["izero"] #[[$ATTR_17]]
// CHECK:         %[[VAL_17:.*]] = p4hir.const ["fa"] #[[$ATTR_27]]
// CHECK:         %[[VAL_18:.*]] = p4hir.const ["fb"] #[[$ATTR_29]]
// CHECK:         %[[VAL_19:.*]] = p4hir.const ["fc"] #[[$ATTR_28]]
// CHECK:         %[[VAL_20:.*]] = p4hir.const ["fd"] #[[$ATTR_7]]
// CHECK:         %[[VAL_21:.*]] = p4hir.const ["fe"] #[[$ATTR_10]]
// CHECK:         %[[VAL_22:.*]] = p4hir.const ["ff"] #[[$ATTR_5]]
// CHECK:         %[[VAL_23:.*]] = p4hir.const ["fg"] #[[$ATTR_8]]
// CHECK:         %[[VAL_24:.*]] = p4hir.const ["fh"] #[[$ATTR_10]]
// CHECK:         %[[VAL_25:.*]] = p4hir.const ["sa"] #[[$ATTR_18]]
// CHECK:         %[[VAL_26:.*]] = p4hir.const ["sb"] #[[$ATTR_9]]
// CHECK:         %[[VAL_27:.*]] = p4hir.const ["sc"] #[[$ATTR_12]]
// CHECK:         %[[VAL_28:.*]] = p4hir.const ["sd"] #[[$ATTR_2]]
// CHECK:         %[[VAL_29:.*]] = p4hir.const ["se"] #[[$ATTR_3]]
// CHECK:         %[[VAL_30:.*]] = p4hir.const ["sf"] #[[$ATTR_19]]
// CHECK:         %[[VAL_31:.*]] = p4hir.const ["sg"] #[[$ATTR_21]]
// CHECK:         %[[VAL_32:.*]] = p4hir.const ["sh"] #[[$ATTR_18]]
// CHECK:         %[[VAL_33:.*]] = p4hir.const ["si"] #[[$ATTR_21]]
// CHECK:         %[[VAL_34:.*]] = p4hir.const ["sj"] #[[$ATTR_25]]
// CHECK:         %[[VAL_35:.*]] = p4hir.const ["sk"] #[[$ATTR_19]]
// CHECK:         %[[VAL_36:.*]] = p4hir.const ["sl"] #[[$ATTR_3]]
// CHECK:         %[[VAL_37:.*]] = p4hir.const ["sm"] #[[$ATTR_2]]
// CHECK:         %[[VAL_38:.*]] = p4hir.const ["sn"] #[[$ATTR_9]]
// CHECK:         %[[VAL_39:.*]] = p4hir.const ["so"] #[[$ATTR_18]]
// CHECK:         %[[VAL_40:.*]] = p4hir.const ["sa0"] #[[$ATTR_18]]
// CHECK:         %[[VAL_41:.*]] = p4hir.const ["sb0"] #[[$ATTR_9]]
// CHECK:         %[[VAL_42:.*]] = p4hir.const ["sc0"] #[[$ATTR_12]]
// CHECK:         %[[VAL_43:.*]] = p4hir.const ["sd0"] #[[$ATTR_2]]
// CHECK:         %[[VAL_44:.*]] = p4hir.const ["se0"] #[[$ATTR_3]]
// CHECK:         %[[VAL_45:.*]] = p4hir.const ["sf0"] #[[$ATTR_19]]
// CHECK:         %[[VAL_46:.*]] = p4hir.const ["sg0"] #[[$ATTR_21]]
// CHECK:         %[[VAL_47:.*]] = p4hir.const ["sh0"] #[[$ATTR_18]]
// CHECK:         %[[VAL_48:.*]] = p4hir.const ["si0"] #[[$ATTR_21]]
// CHECK:         %[[VAL_49:.*]] = p4hir.const ["sj0"] #[[$ATTR_25]]
// CHECK:         %[[VAL_50:.*]] = p4hir.const ["sk0"] #[[$ATTR_19]]
// CHECK:         %[[VAL_51:.*]] = p4hir.const ["sl0"] #[[$ATTR_3]]
// CHECK:         %[[VAL_52:.*]] = p4hir.const ["sm0"] #[[$ATTR_2]]
// CHECK:         %[[VAL_53:.*]] = p4hir.const ["sn0"] #[[$ATTR_9]]
// CHECK:         %[[VAL_54:.*]] = p4hir.const ["so0"] #[[$ATTR_18]]
// CHECK:         %[[VAL_55:.*]] = p4hir.const ["szz0"] #[[$ATTR_16]]
// CHECK:         %[[VAL_56:.*]] = p4hir.const ["szz1"] #[[$ATTR_6]]
// CHECK:         %[[VAL_57:.*]] = p4hir.const ["szz2"] #[[$ATTR_11]]
// CHECK:         %[[VAL_58:.*]] = p4hir.const ["szz3"] #[[$ATTR_16]]

